#!/usr/bin/env python
import sys
import os
import subprocess

pylib_dir = os.environ['_DEVOPS_ROOT'] + "/share/devops/"
sys.path.insert(0, pylib_dir)
import devop_config
from jinja2 import Template
import subprocess
import socket
import shlex
import re

CONFIG = devop_config.config()

def haproxy_install():
    devop_config.ssh_cmd('sudo add-apt-repository -y ppa:vbernat/haproxy-1.6', host='local')
    devop_config.ssh_cmd('sudo apt-get update', host='local')
    devop_config.ssh_cmd('sudo apt-get install -y haproxy', host='local')

def haproxy_start():
    devop_config.ssh_cmd('sudo service haproxy start', host='local')

def haproxy_stop():
    devop_config.ssh_cmd('sudo service haproxy stop', host='local')

def haproxy_restart():
    devop_config.ssh_cmd('sudo service haproxy restart', host='local')

def haproxy_reload():
    devop_config.ssh_cmd('sudo service haproxy reload', host='local')

def haproxy_status():
    devop_config.ssh_cmd('/etc/init.d/haproxy status', host='local')

def haproxy_config():
    # Get IP address from knife command
    command = "knife node show website -a ipaddress"

    out = subprocess.Popen(shlex.split(command), stdout=subprocess.PIPE).communicate()[0]

    m = re.search('(?<=\sipaddress:\s).*', out)
    website_ip = m.group(0)

    try:
        socket.inet_aton(website_ip)
        # legal
    except socket.error:
        # Not legal
        print("invalid IP address from knife")
        sys.exit(1)

    # write template
    i_file = pylib_dir + "haproxy.cfg.tpl"
    o_file = '/etc/haproxy/haproxy.cfg'
    devop_config.ssh_cmd('sudo cp {} {}'.format(i_file, o_file), host='local')
    devop_config.ssh_cmd('sudo sed -i "s/<WEBSITE_IP>/{}/" {}'.format(website_ip, o_file), host='local')

    haproxy_reload()

def test():
    devop_config.ssh_cmd('curl http://localhost:80', host='local')

def main():
    switcher = {
        'start': haproxy_start,
        'stop' : haproxy_stop,
        'restart': haproxy_restart,
        'reload':haproxy_reload,
        'status': haproxy_status,
        'config': haproxy_config,
        'test' : test,
    }

    parser = devop_config.devop_args()
    parser.add_argument('command', choices=switcher.keys())
    args = parser.parse_args()

    if args.role is not None:
        role=args.role
    else:
        role=CONFIG.get('defaults','role')

    func = switcher.get(args.command, lambda: "nothing")
    func()

if __name__ == "__main__":
	main()
